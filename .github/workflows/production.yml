# Define a CI/CD pipeline named "CI/CD Pipeline"
name: CI/CD Pipeline

# Trigger the pipeline on push and pull request events for the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define two jobs: "test" and "build-and-push-docker"
jobs:
  test:
    # Run the test job on an ubuntu-latest environment
    runs-on: ubuntu-latest
    # Define a matrix strategy to run the job with different Python versions
    strategy:
      matrix:
        python-version: [3.10.12] # Define Python versions here

    # Define a service to run a Postgres database
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    # Define the steps for the test job
    steps:
      # Checkout the code
      - uses: actions/checkout@v4
      
      # Set up Python with the specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      # Cache Python packages
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Debug: Check environment variables
      - name: Debug Environment Variables
        run: |
          echo "SMTP_SERVER: $SMTP_SERVER"
          echo "SMTP_PORT: $SMTP_PORT"
          echo "SMTP_USERNAME: $SMTP_USERNAME"
          echo "SMTP_PASSWORD: $SMTP_PASSWORD"
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      # Create a .env file with SMTP settings
      - name: Create .env file
        run: |
          echo "smtp_server=$SMTP_SERVER" >> .env
          echo "smtp_port=$SMTP_PORT" >> .env
          echo "smtp_username=$SMTP_USERNAME" >> .env
          echo "smtp_password=$SMTP_PASSWORD" >> .env
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      # Run tests with Pytest
      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
        run: pytest

  build-and-push-docker:
    # This job depends on the "test" job
    needs: test
    # Run the job on an ubuntu-latest environment
    runs-on: ubuntu-latest
    # Set the environment to "production"
    environment: production
    # Define the steps for the job
    steps:
      # Checkout the code
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: dyerovi/event_manager_hw10:${{ github.sha }} # Uses the Git SHA for tagging
          platforms: linux/amd64,linux/arm64 # Multi-platform support
          cache-from: type=registry,ref=dyerovi/event_manager_hw10:cache
          cache-to: type=inline,mode=max
          
      # Scan the Docker image for vulnerabilities
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dyerovi/event_manager_hw10:${{ github.sha }}'
          format: 'table'
          exit-code: '1' # Fail the job if vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
